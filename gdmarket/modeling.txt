1. item 서비스
	1) Actor : Owner (물건 소유자)
	2) Aggregate : item (소유한 물건 내역)
		- Attributes
			- integer itemNo : item 고유 번호
			- String itemName : item 이름
			- integer itemPrice : item 가격
			- String itemStatus : item 대여 가능 여부 (Rentable/NotRentable)
	3) Scenario
		(1) 물건등록함(RegisterItem)
			- Owner가 본인이 대여해줄 물건을 등록함
			- Command : RegisterItem (POST item)
			- Event : itemRegistered
			- itemStatus : Rentable
		(2) 물건삭제함(DeleteItem)
			- Owner가 등록한 물건 중 하나를 삭제함
			- Command : DeleteItem (DELETE item itemNo)
			- Event : itemDeleted
		(3) 물건대여함(LendItem)
			- 결제가 완료되면 물건 대여를 수행함. (결제 완료 후 Sync로 수행 됨)
			- Command : LendItem (PATCH item rentalStatus)
			- Event : RentedItem
			- itemStatus : NotRentable
			- reservation의 rentalStatus를 Renting 으로 변경 (pub/sub으로 수행)
		(4) 물건반납받음(ReturnItem)
			- Owner가 Customer에게 대여해준 물건을 반납받음
			- Command : ReturnItem (PATCH item rentalStatus)
			- Event : ReturnedItem
			- itemStatus : Rentable
			- reservation의 rentalStatus를 NotRenting 으로 변경 (pub/sub으로 수행)
		(5) 물건상태변경(UpdateItemStatus)
			- Customer의 reservation 여부에 따라서 itemStatus를 변경함
			- Policy : UpdateItemStatus
			- Reserved 된 경우 NotRentable로 변경
			- ReservationCancelled 된 경우 Rentable로 변경
	4) View
		- Owner가 본인이 등록한 item의 정보뿐만 아니라 customer가 reservation한 정보까지 한꺼번에 확인하기 위해 생성함.
		- Attributes
			- Integer itemNo : item 고유 번호
			- String itemName : item 이름
			- String itemStatus : item 대여 가능 여부 (Rentable/NotRentable) 
			- Integer itemPrice : item 가격
			- Integer reservationNo : reservation 고유 번호
			- String rentalStatus : Customer의 대여 여부 (Renting/NotRenting/Returned)
			- Intger customerId : Customer 고유 ID
			- String customerName : Customer 이름
		(1) CREATE WHEN itemRegistered
		(2) UPDATE WHEN Reserved
		(3) UPDATE WHEN ReservationCancelled
		(4) UPDATE WHEN RentedItem
		(5) UPDATE WHEN ReturnedItem
		(6) DELETE WHEN itemDeleted
		
2. reservation 서비스
	1) Actor : Customer (물건을 대여받는 사람)
	2) Aggregate : reservation (예약 정보)
		- Attributes
			- Integer reservationNo : reservation 고유 번호
			- String customerName : Customer 이름
			- Integer customerId : Customer 고유 ID
			- String rentalStatus : Customer의 대여 여부 (Renting/NotRenting/Returned)
			- Integer itemNo : item 고유 번호
			- integer itemPrice : item 가격
			- String paymentStatus : 결제 여부 (Paid/NotPaid)
	3) Scenario
		(1) 대여예약함(Reserve)
			- Customer가 원하는 물건을 대여 예약함
			- Command : Reserve (POST reservation)
			- Event : Reserved
			- rentalStatus : NotRenting
			- paymentStatus : NotPaid
			- item의 itemStatus를 NotRentable 으로 변경 (pub/sub으로 수행)
		(2) 대여예약취소함(CancelReservation)
			- Customer가 수행했던 대여 예약을 취소함
			- Command : CancelReservation (DELETE reservation reservationNo)
			- Event : ReservationCancelled
			- rentalStatus : NotRenting
			- paymentStatus : NotPaid
			- item의 itemStatus를 Rentable 으로 변경 (pub/sub으로 수행)
		(3) 결제요청함(RequestPayment)
			- Customer가 대여 예약한 내역에 대해 값을 지불함
			- Command : RequestPayment (PATCH reservation paymentStatus)
			- Event : PaymentRequested
			- rentalStatus : 모든 Sync 수행 후 Renting 으로 변경
			- paymentStatus : Paid
			- desc : 
				payment의 ApprovePayment 수행, 결제 완료 됨 (sync로 수행)
				-> item의 LendItem 수행, 물건 대여 됨 (sync로 수행)
				-> reservation의 UpdateRentalStatus 수행, rentalStatus=Renting 변경 됨 (pub/sub으로 수행)
		(4) 결제요청취소함(RequestPaymentCancellation)
			- Customer가 결제 요청을 취소함
			- Command : RequestPaymentCancellation (PATCH reservation paymentStatus)
			- Event : PaymentCancellationRequested
			- rentalStatus : NotRenting
			- paymentStatus : NotPaid
			- desc : 
				payment의 PaymentCanceled 수행, 결제 취소 됨 (sync로 수행)
				rentalStatus=NotRenting 유지, itemStatus=NotRentable 유지
				아직 값을 지불 안 했으므로 NotRenting, 대여 예약 취소 한 것이 아니므로 NotRentable

        
3. payment 서비스
	1) Actor : payment 시스템
	2) Aggregate : payment (결제 시스템)
		- Attributes
			- Integer paymentNo : payment 고유 번호
			- Integer reservationNo : reservation 고유 번호
			- Integer itemNo : item 고유 번호
			- Integer ItemPrice : item 가격
			- String paymentStatus : 결제 여부 (Paid/NotPaid)
	3) Scenario
		(1) 결제 승인 : 2.3).(3).desc 참고
		(2) 결제 취소 : 2.4).(4).desc 참고
		
		
##########################################################################	
		
(참고) set up 및 시나리오

* kafka 설정
	# kafka 디렉토리로 이동
	cd C:\kafka_2.13\bin\windows

	# zookeeper 실행 (터미널1)
	.\zookeeper-server-start.bat ..\..\config\zookeeper.properties

	# kafka 실행 (터미널2)
	.\kafka-server-start.bat ..\..\config\server.properties
	
	# consumer 실행 (터미널3)
	.\kafka-console-consumer.bat --bootstrap-server 127.0.0.1:9092 --topic gdmarket


* http 명령 (터미널4)

	# items 등록
	http POST localhost:8081/items/ itemName=Camera itemPrice=100 itemStatus=Rentable rentalStatus=NotRenting
	
	# 예약
	http POST localhost:8082/reservations customerName=YoungEunSong customerId=1 itemNo=1 itemName=Camera itemPrice=100 paymentStatus=NotPaid rentalStatus=NotRenting
	
	# tems 1번의 itemStatus가 NotRentable로 바뀌었는지 확인 (pub/sub)
	http localhost:8081/items/1 
			
			# 예약 취소
			http DELETE localhost:8082/reservations/1
			# items 1번의 itemStatus가 Rentable로 바뀌었는지 확인 (pub/sub)
			ttp localhost:8081/items/1 
	
	# 결제요청 
	http PATCH localhost:8082/reservations/1 paymentStatus=Paid
	
	# payments 생성 되어있는지 확인 (req/res)
	http localhost:8083/payments
	
			# 결제취소요청 
			http PATCH localhost:8082/reservations/1 reservationNo=1 paymentStatus=NotPaid	
			# payments 삭제 되어있는지 확인 (req/res)
			http localhost:8083/payments
	
	# 대여 
	http PATCH localhost:8081/items/1 itemNo=1 reservationNo=1 itemStatus=NotRentable rentalStatus=Renting 
	
	# reservations의 rentalStatus가 Renting으로 변경되었는지 확인 (pub/sub)
	http localhost:8082/reservations/1
	
	# 반납 
	http PATCH localhost:8081/items/1 itemNo=1 reservationNo=1 itemStatus=Rentable rentalStatus=Returned
	
	# reservations의 rentalStatus가 Returned으로 변경되었는지 확인 (pub/sub)
	http localhost:8082/reservations/1
